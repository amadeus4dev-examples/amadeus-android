apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //Amadeus credentials
            if (System.getenv('amadeus.api.key') != null) {
                buildConfigField "String", "AMADEUS_CLIENT_ID", System.getenv('AMADEUS_CLIENT_ID')
            } else {
                buildConfigField "String", "AMADEUS_CLIENT_ID", "null"
            }
            if (System.getenv('amadeus.api.secret') != null) {
                buildConfigField "String", "AMADEUS_CLIENT_SECRET", System.getenv('AMADEUS_CLIENT_SECRET')
            } else {
                buildConfigField "String", "AMADEUS_CLIENT_SECRET", "null"
            }
        }

        debug {
            //Amadeus credentials
            if (project.hasProperty("amadeus.api.key")) {
                buildConfigField "String", "AMADEUS_CLIENT_ID", property("amadeus.api.key")
            } else {
                buildConfigField "String", "AMADEUS_CLIENT_ID", "null"
            }
            if (project.hasProperty("amadeus.api.secret")) {
                buildConfigField "String", "AMADEUS_CLIENT_SECRET", property("amadeus.api.secret")
            } else {
                buildConfigField "String", "AMADEUS_CLIENT_SECRET", "null"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    implementation "androidx.annotation:annotation:$annotation_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Moshi + OkHttp + Retrofit
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
}

apply from: '../publish.gradle'
apply from: '../swagger_codegen.gradle'
