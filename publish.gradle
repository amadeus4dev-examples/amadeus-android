apply plugin: 'maven-publish'
apply plugin: 'signing'

// Create variables with empty default values
ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from "$buildDir/dokka"
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {		    
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version VERSION
			
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
                artifact androidJavadocsJar
			
                pom {
		    println(System.getenv('SIGN_KEY'))
		    if (System.getenv('SIGN_KEY') != null){	
		        signing {
		            sign publishing.publications.release
			    sign configurations.archives
		        }
		    }
		    
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }
                    developers {
                        developer {
                            id = 'aroux'
                            name = 'Anthony Roux'
                            email = 'anthony.roux@amadeus.com'
                        }
                        developer {
                            id = 'pietrini'
                            name = 'Nicolas Pietri'
                            email = 'nico.pietri@gmail.com'
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }

                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            if (it.group == null || it.version == null || it.name == null || it.name == "unspecified")
			        return
				
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                mavenContent {
                    releasesOnly()
                }
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}
